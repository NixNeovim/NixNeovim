{
  inlayHints = {
UNKNOWN (binary_operation)
    # Options other than `highlight' and `priority' only work
    # if `inline' is disabled
    # Only show inlay hints for the current line
    onlyCurrentLine = boolOption false "Only show inlay hints for the current line";
    # Event which triggers a refresh of the inlay hints.
    # You can make this { "CursorMoved" } or { "CursorMoved,CursorMovedI" } but
    # not that this may cause  higher CPU usage.
    # This option is only respected when only_current_line and
    # autoSetHints both are true.
    onlyCurrentLineAutocmd = listOption [
      "CursorHold"
    ] "";
    # whether to show parameter hints with the inlay hints or not
    showParameterHints = boolOption true "whether to show parameter hints with the inlay hints or not";
    # prefix for parameter hints
    parameterHintsPrefix = strOption "<- " "prefix for parameter hints";
    # prefix for all the other hints (type, chaining)
    otherHintsPrefix = strOption "=> " "prefix for all the other hints (type, chaining)";
    # whether to align to the length of the longest line in the file
    maxLenAlign = boolOption false "whether to align to the length of the longest line in the file";
    # padding from the left if max_len_align is true
    maxLenAlignPadding = intOption 1 "padding from the left if max_len_align is true";
    # whether to align to the extreme right or not
    rightAlign = boolOption false "whether to align to the extreme right or not";
    # padding from the right if right_align is true
    rightAlignPadding = intOption 7 "padding from the right if right_align is true";
    # The color of the hints
    highlight = strOption "Comment" "The color of the hints";
    # The highlight group priority for extmark
    priority = intOption 100 "The highlight group priority for extmark";
  };
  ast = {
    # These are unicode, should be available in any font
    roleIcons = listOption [
      type = strOption "🄣", "These are unicode, should be available in any font";
      declaration = strOption "🄓", "These are unicode, should be available in any font";
      expression = strOption "🄔", "These are unicode, should be available in any font";
      statement = strOption ";" "These are unicode, should be available in any font";
      specifier = strOption "🄢", "These are unicode, should be available in any font";
      "🆃",
    ] "";
    kindIcons = {
      compound = strOption "🄲", "These are unicode, should be available in any font";
      recovery = strOption "🅁", "These are unicode, should be available in any font";
      translationunit = strOption "🅄", "These are unicode, should be available in any font";
      packexpansion = strOption "🄿", "These are unicode, should be available in any font";
      templatetypeparm = strOption "🅃", "These are unicode, should be available in any font";
      templatetemplateparm = strOption "🅃", "These are unicode, should be available in any font";
      templateparamobject = strOption "🅃", "These are unicode, should be available in any font";
    };
    # [[ Thes
    highlights = {
      detail = strOption "Comment" "[[ Thes";
    };
  };
  memoryUsage = {
    border = strOption "none" "[[ Thes";
  };
  symbolInfo = {
    border = strOption "none" "[[ Thes";
  };
};

